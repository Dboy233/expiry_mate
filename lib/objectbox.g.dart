// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/data/config.dart';
import 'db/data/food.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8247850119236088470),
      name: 'Foods',
      lastPropertyId: const obx_int.IdUid(9, 6573651186418774517),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1978703825323363665),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3670068430286556413),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5826363443805004389),
            name: 'createDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8301933375774155232),
            name: 'overDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 284636853671815333),
            name: 'type',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1231897560487208768),
            name: 'reminderDays',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9192684848696853522),
            name: 'tag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6573651186418774517),
            name: 'safeDays',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 9211070878658700025),
      name: 'Config',
      lastPropertyId: const obx_int.IdUid(2, 3331200561438842247),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4639962289372667724),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3331200561438842247),
            name: 'themeMode',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 9211070878658700025),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [7724500105936233552],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3357574269527499781,
        5807427184758940291,
        8748127674798035626
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Foods: obx_int.EntityDefinition<Foods>(
        model: _entities[0],
        toOneRelations: (Foods object) => [],
        toManyRelations: (Foods object) => {},
        getId: (Foods object) => object.id,
        setId: (Foods object, int id) {
          object.id = id;
        },
        objectToFB: (Foods object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final tagOffset =
              object.tag == null ? null : fbb.writeString(object.tag!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.overDate?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.type);
          fbb.addInt64(6, object.reminderDays);
          fbb.addOffset(7, tagOffset);
          fbb.addInt64(8, object.safeDays);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final overDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final createDateParam = createDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createDateValue);
          final overDateParam = overDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(overDateValue);
          final safeDaysParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final typeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final reminderDaysParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final tagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = Foods(
              id: idParam,
              name: nameParam,
              createDate: createDateParam,
              overDate: overDateParam,
              safeDays: safeDaysParam,
              type: typeParam,
              reminderDays: reminderDaysParam,
              tag: tagParam);

          return object;
        }),
    Config: obx_int.EntityDefinition<Config>(
        model: _entities[1],
        toOneRelations: (Config object) => [],
        toManyRelations: (Config object) => {},
        getId: (Config object) => object.id,
        setId: (Config object, int id) {
          object.id = id;
        },
        objectToFB: (Config object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.themeMode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final themeModeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Config(id: idParam, themeMode: themeModeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Foods] entity fields to define ObjectBox queries.
class Foods_ {
  /// See [Foods.id].
  static final id = obx.QueryIntegerProperty<Foods>(_entities[0].properties[0]);

  /// See [Foods.name].
  static final name =
      obx.QueryStringProperty<Foods>(_entities[0].properties[1]);

  /// See [Foods.createDate].
  static final createDate =
      obx.QueryDateProperty<Foods>(_entities[0].properties[2]);

  /// See [Foods.overDate].
  static final overDate =
      obx.QueryDateProperty<Foods>(_entities[0].properties[3]);

  /// See [Foods.type].
  static final type =
      obx.QueryIntegerProperty<Foods>(_entities[0].properties[4]);

  /// See [Foods.reminderDays].
  static final reminderDays =
      obx.QueryIntegerProperty<Foods>(_entities[0].properties[5]);

  /// See [Foods.tag].
  static final tag = obx.QueryStringProperty<Foods>(_entities[0].properties[6]);

  /// See [Foods.safeDays].
  static final safeDays =
      obx.QueryIntegerProperty<Foods>(_entities[0].properties[7]);
}

/// [Config] entity fields to define ObjectBox queries.
class Config_ {
  /// See [Config.id].
  static final id =
      obx.QueryIntegerProperty<Config>(_entities[1].properties[0]);

  /// See [Config.themeMode].
  static final themeMode =
      obx.QueryIntegerProperty<Config>(_entities[1].properties[1]);
}
